{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "connections_azuretables_name": {
            "defaultValue": "azuretables",
            "type": "String"
        },
        "logicAppName": {
            "defaultValue": "conversation-wait",
            "type": "String"
        },
        "eventGridTopicName": {
            "defaultValue": "eventgridrepo3611test-evgt-spzpik",
            "type": "String"
        },
        "conversation_wait_count": {
            "defaultValue": "2",
            "type": "int",
            "metadata": {
                "description": "Amount of wait conversations in the queue."
            }
        },
        "conversation_wait_time": {
            "defaultValue": "2",
            "type": "int",
            "metadata": {
                "description": "Conversation wait time in seconds."
            }                        
        },
        "logicAppsNameUserIdentityName": {
            "defaultValue": "eventgridrepo3611test-lapp-identity-spzpik",
            "type": "String"
        },      
        "azuretablesStorageAccountName": {
            "defaultValue": "stlapptest",
            "type": "String",
            "metadata": {
                "description": "Requires tables QueuesConversations, QueuesWait."
            }            
        }
    },
    "variables": {
        "uniqueId": "[take(uniqueString(resourceGroup().id), 3)]",
        "logicAppsSubscriptionName": "[concat('evgt-subscr-', parameters('logicAppName'), variables('uniqueId'))]",
        "connectionsEventGridName": "[concat('evgt-conn-', parameters('logicAppName'), variables('uniqueId'))]",
        "subscriptionId": "[subscription().subscriptionId]",
        "resourceGroupName": "[resourceGroup().name]",
        "location": "[resourceGroup().location]",
        "logicAppsName": "[concat('lapp-', parameters('logicAppName'), variables('uniqueId'))]",
        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('azuretablesStorageAccountName'))]",
        "targetLogicApp": {
            "triggerId": "[resourceId('Microsoft.Logic/workflows/triggers', variables('logicAppsName'), 'Conversation_Participant_Event')]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_azuretables_name')]",
            "location": "[variables('location')]",
            "kind": "V1",
            "properties": {
                "displayName": "gc-queue-conversations-connection",
                "statuses": [
                    {
                        "status": "Connected"
                    }
                ],
                "customParameterValues": {},
                "parameterValues": {
                    "storageaccount": "[parameters('azuretablesStorageAccountName')]",
                    "sharedkey": "[listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value]"
                },
                "createdTime": "2022-05-18T07:54:30.5719103Z",
                "changedTime": "2022-05-18T07:54:30.7906303Z",
                "api": {
                    "name": "azuretables",
                    "displayName": "Azure Table Storage",
                    "description": "Azure Table storage is a service that stores structured NoSQL data in the cloud, providing a key/attribute store with a schemaless design. Sign into your Storage account to create, update, and query tables and more.",
                    "iconUri": "https://connectoricons-prod.azureedge.net/releases/v1.0.1538/1.0.1538.2619/azuretables/icon.png",
                    "brandColor": "#804998",
                    "id": "[concat('/subscriptions/',variables('subscriptionId'),'/providers/Microsoft.Web/locations/',variables('location'), '/managedApis/azuretables')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "testLinks": [
                    {
                        "requestUri": "[concat('https://management.azure.com:443/subscriptions/',variables('subscriptionId'),'/resourceGroups/',variables('resourceGroupName'),'/providers/Microsoft.Web/connections/azuretables/extensions/proxy/Tables?api-version=2016-06-01')]",
                        "method": "get"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('connectionsEventGridName')]",
            "location": "[variables('location')]",
            "kind": "V1",
            "properties": {
                "api": {
                    "name": "azureeventgrid",
                    "displayName": "Azure Event Grid",
                    "description": "Azure Event Grid is an eventing backplane that enables event based programing with pub/sub semantics and reliable distribution & delivery for all services in Azure as well as third parties.",
                    "iconUri": "https://connectoricons-prod.azureedge.net/releases/v1.0.1538/1.0.1538.2619/azureeventgrid/icon.png",
                    "brandColor": "#0072c6",
                    "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', resourceGroup().location, 'azureeventgrid')]"                    
                },
                "parameterValueType": "Alternative"
            }
        },        
        {
            "name": "[variables('logicAppsSubscriptionName')]",
            "scope": "[format('Microsoft.EventGrid/topics/{0}', parameters('eventGridTopicName'))]",
            "type": "Microsoft.EventGrid/eventSubscriptions",
            "location": "[variables('location')]",
            "apiVersion": "2020-04-01-preview",
            "properties": {
                "destination": {
                    "endpointType": "WebHook",
                    "properties": {
                        "endpointUrl": "[listCallbackUrl(variables('TargetLogicApp').triggerId, '2019-05-01').value]"
                    }
                },
                "filter": {
                    "includedEventTypes": [
                        "queues.conversations.calls"
                    ]
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Logic/workflows', variables('logicAppsName'))]",
                "[resourceId('Microsoft.Web/connections', variables('connectionsEventGridName'))]"
            ]
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('logicAppsName')]",
            "location": "northeurope",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('connections_azuretables_name'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[concat('/subscriptions/', variables('subscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('logicAppsNameUserIdentityName'))]": {}
                }
            },            
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Conversation_Participant_Event": {
                            "splitOn": "@triggerBody()",
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "properties": {
                                        "destination": {
                                            "endpointType": "webhook",
                                            "properties": {
                                                "endpointUrl": "@{listCallbackUrl()}"
                                            }
                                        },
                                        "filter": {
                                            "includedEventTypes": [
                                                "queues.conversations.calls"
                                            ]
                                        },
                                        "topic": "[resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName'))]"
                                    }
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureeventgrid_1']['connectionId']"
                                    }
                                },
                                "path": "[concat('/subscriptions/@{encodeURIComponent(''', subscription().subscriptionId, ''')}/providers/@{encodeURIComponent(''Microsoft.EventGrid.Topics'')}/resource/eventSubscriptions')]",
                                "queries": {
                                    "x-ms-api-version": "2017-06-15-preview"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Conversation_Participant": {
                            "runAfter": {},
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@triggerBody()?['data']",
                                "schema": {
                                    "properties": {
                                        "AgentId": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "ConnectedTime": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "ConversationId": {
                                            "type": "string"
                                        },
                                        "Direction": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "DisconnectType": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "EndAcwTime": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "EndTime": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "Id": {
                                            "type": "string"
                                        },
                                        "Name": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "Purpose": {
                                            "type": "string"
                                        },
                                        "QueueId": {
                                            "type": "string"
                                        },
                                        "StartAcwTime": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "StartTime": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "State": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "WrapupId": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Initialize_Conversation_Participants_Count": {
                            "runAfter": {
                                "Conversation_Participant": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ParticipantsCount",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_Queue_Wait_Count": {
                            "runAfter": {
                                "Initialize_Conversation_Participants_Count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "QueueWaitCount",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Switch_on_Conversation_Purpose": {
                            "runAfter": {
                                "Initialize_Queue_Wait_Count": [
                                    "Succeeded"
                                ]
                            },
                            "cases": {
                                "ACD": {
                                    "case": "acd",
                                    "actions": {
                                        "ACD_Delay": {
                                            "runAfter": {},
                                            "type": "Wait",
                                            "inputs": {
                                                "until": {
                                                    "timestamp": "[concat('@addSeconds(triggerBody()?[''eventTime''],', parameters('conversation_wait_time'), ')')]"
                                                }
                                            }
                                        },
                                        "Condition": {
                                            "actions": {
                                                "Delete_Conversation_Participant": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                            }
                                                        },
                                                        "method": "delete",
                                                        "path": "/Tables/@{encodeURIComponent('QueuesConversations')}/entities/etag(PartitionKey='@{encodeURIComponent(body('Conversation_Participant')?['ConversationId'])}',RowKey='@{encodeURIComponent('agent')}')"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Set_Participants_Count": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Condition_Queue_Wait_Count": {
                                                        "actions": {},
                                                        "runAfter": {
                                                            "Set_QueueWaitCount": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "greater": [
                                                                        "@variables('QueueWaitCount')",
                                                                        "[parameters('conversation_wait_count')]"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "Insert_Queue_Wait": {
                                                        "runAfter": {},
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "body": "@body('Conversation_Participant')",
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                                }
                                                            },
                                                            "method": "put",
                                                            "path": "/Tables/@{encodeURIComponent('QueuesWait')}/entities(PartitionKey='@{encodeURIComponent(body('Conversation_Participant')?['QueueId'])}',RowKey='@{encodeURIComponent(body('Conversation_Participant')?['ConversationId'])}')"
                                                        }
                                                    },
                                                    "Queue_Wait_Conversations": {
                                                        "runAfter": {
                                                            "Insert_Queue_Wait": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                                }
                                                            },
                                                            "method": "get",
                                                            "path": "/Tables/@{encodeURIComponent('QueuesWait')}/entities",
                                                            "queries": {
                                                                "$filter": "PartitionKey eq '@{body('Conversation_Participant')?['QueueId']}'",
                                                                "$select": "RowKey"
                                                            }
                                                        }
                                                    },
                                                    "Set_QueueWaitCount": {
                                                        "runAfter": {
                                                            "Queue_Wait_Conversations": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "QueueWaitCount",
                                                            "value": "@length(body('Queue_Wait_Conversations')?['value'])"
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "greater": [
                                                            "@variables('ParticipantsCount')",
                                                            0
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Conversation_Participants": {
                                            "runAfter": {
                                                "ACD_Delay": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/Tables/@{encodeURIComponent('QueuesConversations')}/entities",
                                                "queries": {
                                                    "$filter": "PartitionKey eq '@{body('Conversation_Participant')?['ConversationId']}' and RowKey eq 'agent'",
                                                    "$select": "RowKey"
                                                }
                                            }
                                        },
                                        "Set_Participants_Count": {
                                            "runAfter": {
                                                "Conversation_Participants": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "ParticipantsCount",
                                                "value": "@length(body('Conversation_Participants')?['value'])"
                                            }
                                        }
                                    }
                                },
                                "Agent": {
                                    "case": "agent",
                                    "actions": {
                                        "Delete_Conversation_from_QueueWait_Table": {
                                            "runAfter": {
                                                "Insert_or_Replace_Conversation": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                    }
                                                },
                                                "method": "delete",
                                                "path": "/Tables/@{encodeURIComponent('QueuesWait')}/entities/etag(PartitionKey='@{encodeURIComponent(body('Conversation_Participant')?['QueueId'])}',RowKey='@{encodeURIComponent(body('Conversation_Participant')?['ConversationId'])}')"
                                            }
                                        },
                                        "Insert_or_Replace_Conversation": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "purpose": "agent"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                    }
                                                },
                                                "method": "put",
                                                "path": "/Tables/@{encodeURIComponent('QueuesConversations')}/entities(PartitionKey='@{encodeURIComponent(body('Conversation_Participant')?['ConversationId'])}',RowKey='@{encodeURIComponent('agent')}')"
                                            }
                                        }
                                    }
                                }
                            },
                            "default": {
                                "actions": {}
                            },
                            "expression": "@body('Conversation_Participant')?['Purpose']",
                            "type": "Switch"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureeventgrid_1": {
                                "connectionId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/', variables('connectionsEventGridName'))]",
                                "connectionName": "[variables('connectionsEventGridName')]",
                                "id": "[concat('/subscriptions/', variables('subscriptionId'),'/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/azureeventgrid')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('logicAppsNameUserIdentityName'))]",
                                        "type": "ManagedServiceIdentity"
                                    }
                                }                                
                            },
                            "azuretables": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_azuretables_name'))]",
                                "connectionName": "azuretables",
                                "id": "[concat('/subscriptions/', variables('subscriptionId'),'/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/azuretables')]"                                
                            }
                        }
                    }
                }
            }
        }
    ]
}